apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport) {

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*$*$*.*', // Anonymous classes generated by kotlin
            //add libraries
            'android/**/*.*',
            'uk/**/*.*',
            'io/**/*.*',
            //remove what we don't test
            'androidTest/**/*.*',
            'test/**/*.*',
            '**/injector/**/*.*',
            '**/model/**/*.*',
            '**/mock/**/*.*',
            '**/event/**/*.*',
            '**/**_ViewBinding**',
            '**/*EventType.*',
            '**/**Mocked'
    ]

    // TODO: Update dynamic class directory for Java classes
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([debugTree], [kotlinDebugTree])
    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

task testProdUnitTest { finalizedBy jacocoTestReport }